"""
Test: Hi·ªáu ·ª©ng h·ªìi sinh c·ªßa Gi√°p √Ånh S√°ng
"""
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__))))

from ma_nguon.doi_tuong.nhan_vat.nhan_vat import Character
from ma_nguon.doi_tuong.equipment import EquipmentManager
from ma_nguon.core.equipment_manager_global import get_global_equipment_manager
from ma_nguon.core.character_data import get_character_by_id

print("\n" + "="*80)
print("TEST: HI·ªÜU ·ª®NG H·ªíI SINH C·ª¶A GI√ÅP √ÅNH S√ÅNG")
print("="*80)

# Setup
char_data = get_character_by_id("ninja")
print(f"\nüë§ T·∫°o nh√¢n v·∫≠t: {char_data['name']}")

# Create character
folder = char_data["folder"]
color = char_data["color"]
player = Character(100, 300, folder, color=color)

# Set base stats
stats = char_data["stats"]
player.hp = stats["hp"]
player.max_hp = stats["hp"]
player.speed = stats["speed"]
player.damage = stats["damage"]
player.defense = stats["defense"]

print(f"  Base stats: HP={player.hp}, DMG={player.damage}")
print(f"  revive_available: {player.revive_available}")
print(f"  equipped_armor_has_revive: {player.equipped_armor_has_revive}")

# Equip Gi√°p √Ånh S√°ng
print(f"\n‚öîÔ∏è Trang b·ªã Gi√°p √Ånh S√°ng...")
eq_mgr = EquipmentManager()
eq_mgr.add_to_inventory("giap_anh_sang")

giap = eq_mgr.all_equipment["giap_anh_sang"]
eq_mgr.equip(giap, player)

print(f"  Stats after equip: HP={player.hp}/{player.max_hp}")
print(f"  revive_available: {player.revive_available}")
print(f"  equipped_armor_has_revive: {player.equipped_armor_has_revive}")

# Simulate death
print(f"\nüíÄ M√¥ ph·ªèng nh√¢n v·∫≠t ch·∫øt...")
print(f"  HP tr∆∞·ªõc khi ch·∫øt: {player.hp}")

# Trigger take_damage to kill character
damage_to_kill = player.hp + 100
print(f"  G√¢y {damage_to_kill} damage...")
player.take_damage(damage_to_kill, attacker_flip=False)

print(f"\n‚ú® Ki·ªÉm tra k·∫øt qu·∫£:")
print(f"  HP sau khi ch·∫øt: {player.hp}")
print(f"  Dead: {player.dead}")
print(f"  revive_available: {player.revive_available}")

# Check results
expected_hp = int(player.max_hp * 0.5)
success = True

if player.dead:
    print(f"\n‚ùå TEST FAILED!")
    print(f"  Nh√¢n v·∫≠t v·∫´n ch·∫øt! (dead={player.dead})")
    print(f"  HP: {player.hp} (expected: {expected_hp})")
    success = False
elif player.hp != expected_hp:
    print(f"\n‚ö†Ô∏è TEST PARTIALLY FAILED!")
    print(f"  Nh√¢n v·∫≠t h·ªìi sinh nh∆∞ng HP sai!")
    print(f"  HP: {player.hp} (expected: {expected_hp})")
    success = False
elif player.revive_available:
    print(f"\n‚ö†Ô∏è TEST PARTIALLY FAILED!")
    print(f"  Nh√¢n v·∫≠t h·ªìi sinh nh∆∞ng revive_available v·∫´n = True!")
    print(f"  (Ph·∫£i = False sau khi d√πng)")
    success = False
else:
    print(f"\n‚úÖ TEST PASSED!")
    print(f"  Nh√¢n v·∫≠t h·ªìi sinh v·ªõi {player.hp}/{player.max_hp} HP (50%)")
    print(f"  revive_available = False (ƒë√£ d√πng)")

# Test revive only once
print(f"\nüîÑ Test revive ch·ªâ ho·∫°t ƒë·ªông 1 l·∫ßn...")
print(f"  Gi·∫øt nh√¢n v·∫≠t l·∫ßn 2...")
player.hp = player.max_hp  # Reset HP
print(f"  HP tr∆∞·ªõc khi ch·∫øt l·∫ßn 2: {player.hp}")

player.take_damage(player.hp + 100, attacker_flip=False)

print(f"  HP sau khi ch·∫øt l·∫ßn 2: {player.hp}")
print(f"  Dead: {player.dead}")

if player.dead and player.hp <= 0:
    print(f"  ‚úÖ ƒê√∫ng! Revive ch·ªâ work 1 l·∫ßn")
else:
    print(f"  ‚ùå Sai! Revive kh√¥ng n√™n work l·∫ßn 2")
    success = False

print("\n" + "="*80)
if success:
    print("üéâ HO√ÄN TH√ÄNH! Hi·ªáu ·ª©ng h·ªìi sinh ho·∫°t ƒë·ªông ƒë√∫ng!")
    print("="*80)
    print("\nüí° Trong game th·ª±c t·∫ø:")
    print("  1. Trang b·ªã Gi√°p √Ånh S√°ng cho nh√¢n v·∫≠t")
    print("  2. Khi HP = 0, nh√¢n v·∫≠t s·∫Ω h·ªìi sinh v·ªõi 50% HP")
    print("  3. Hi·ªáu ·ª©ng ch·ªâ ho·∫°t ƒë·ªông 1 l·∫ßn cho ƒë·∫øn khi restart level")
else:
    print("‚ùå C√ì L·ªñI! C·∫ßn ki·ªÉm tra l·∫°i")
    print("="*80)

print()
sys.exit(0 if success else 1)
