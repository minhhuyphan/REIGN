"""
Script ƒë·ªÉ √°p d·ª•ng skill system cho t·∫•t c·∫£ map
"""
import os

# Danh s√°ch t·∫•t c·∫£ c√°c file map c·∫ßn c·∫≠p nh·∫≠t
MAP_FILES = [
    "ma_nguon/man_choi/man2.py",
    "ma_nguon/man_choi/map_mua_thu.py",
    "ma_nguon/man_choi/map_mua_thu_man1.py",
    "ma_nguon/man_choi/map_mua_thu_man2.py",
    "ma_nguon/man_choi/map_mua_thu_man3.py",
    "ma_nguon/man_choi/map_ninja.py",
    "ma_nguon/man_choi/map_ninja_man1.py",
    "ma_nguon/man_choi/map_cong_nghe.py",
    "ma_nguon/man_choi/maprunglinhvuc.py"
]

# Template code ƒë·ªÉ th√™m v√†o imports
IMPORT_CODE = """from ma_nguon.man_choi.skill_video import SkillVideoPlayer"""

# Template code ƒë·ªÉ th√™m v√†o __init__
INIT_CODE = """        
        # Skill video system
        self.skill_video = None
        self.showing_skill_video = False"""

# Template code ƒë·ªÉ th√™m v√†o handle_event
HANDLE_EVENT_CODE = """            
            # X·ª≠ l√Ω ph√≠m F - skill (ch·ªâ cho Chi·∫øn Th·∫ßn L·∫°c H·ªìng)
            if event.key == pygame.K_f and "chien_than_lac_hong" in self.player.folder:
                if self.player.can_use_skill():
                    self.activate_skill()
                else:
                    # Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng ƒë·ªß mana ho·∫∑c ƒëang cooldown
                    remaining = self.player.get_skill_cooldown_remaining()
                    if remaining > 0:
                        print(f"[SKILL] Cooldown: {remaining:.1f}s")
                    else:
                        print(f"[SKILL] Kh√¥ng ƒë·ªß mana ({self.player.mana}/{self.player.skill_mana_cost})")"""

# Template methods ƒë·ªÉ th√™m v√†o class
METHOD_CODE = """
    def activate_skill(self):
        \"\"\"K√≠ch ho·∫°t skill - ph√°t video v√† g√¢y s√°t th∆∞∆°ng\"\"\"
        if not self.player.use_skill():
            return
        
        print("[SKILL] Chi·∫øn Th·∫ßn L·∫°c H·ªìng s·ª≠ d·ª•ng skill!")
        
        # T·∫°o callback ƒë·ªÉ g√¢y damage sau khi video k·∫øt th√∫c
        def on_skill_finish():
            self.damage_nearby_enemies()
            self.showing_skill_video = False
            self.skill_video = None
        
        # Ph√°t video skill
        video_path = "Tai_nguyen/video/skill_chien_than.mp4"
        self.skill_video = SkillVideoPlayer(video_path, on_skill_finish)
        self.showing_skill_video = True
    
    def damage_nearby_enemies(self):
        \"\"\"G√¢y s√°t th∆∞∆°ng cho t·∫•t c·∫£ qu√°i v·∫≠t trong ph·∫°m vi\"\"\"
        damaged_count = 0
        
        # Damage qu√°i th∆∞·ªùng
        if hasattr(self, 'normal_enemies'):
            for enemy in self.normal_enemies:
                if enemy.hp > 0:
                    # Ki·ªÉm tra kho·∫£ng c√°ch
                    distance = abs(enemy.x - self.player.x)
                    if distance <= self.player.skill_range:
                        enemy.hp -= self.player.skill_damage
                        enemy.damaged = True
                        damaged_count += 1
                        print(f"[SKILL] Hit enemy at distance {distance:.0f}px, HP: {enemy.hp}")
        
        # Damage enemies list (m·ªôt s·ªë map d√πng t√™n kh√°c)
        if hasattr(self, 'enemies'):
            for enemy in self.enemies:
                if enemy.hp > 0:
                    distance = abs(enemy.x - self.player.x)
                    if distance <= self.player.skill_range:
                        enemy.hp -= self.player.skill_damage
                        enemy.damaged = True
                        damaged_count += 1
                        print(f"[SKILL] Hit enemy at distance {distance:.0f}px, HP: {enemy.hp}")
        
        # Damage boss
        if hasattr(self, 'current_boss') and self.current_boss and self.current_boss.hp > 0:
            distance = abs(self.current_boss.x - self.player.x)
            if distance <= self.player.skill_range:
                self.current_boss.hp -= self.player.skill_damage
                self.current_boss.damaged = True
                damaged_count += 1
                print(f"[SKILL] Hit BOSS at distance {distance:.0f}px, HP: {self.current_boss.hp}")
        
        # Damage boss list
        if hasattr(self, 'bosses'):
            for boss in self.bosses:
                if boss.hp > 0:
                    distance = abs(boss.x - self.player.x)
                    if distance <= self.player.skill_range:
                        boss.hp -= self.player.skill_damage
                        boss.damaged = True
                        damaged_count += 1
                        print(f"[SKILL] Hit BOSS at distance {distance:.0f}px, HP: {boss.hp}")
        
        print(f"[SKILL] Damaged {damaged_count} enemies!")
    
    def draw_skill_ui(self, screen):
        \"\"\"V·∫Ω UI hi·ªÉn th·ªã cooldown v√† mana skill - D∆∞·ªõi thanh m√°u/mana\"\"\"
        # V·ªã tr√≠ UI - D∆∞·ªõi thanh mana (thanh mana ·ªü y=58, height=18)
        # HP bar: (20, 20, 300, 30)
        # Mana bar: (20, 58, 300, 18)
        # Skill UI s·∫Ω ·ªü (20, 84) - ngay d∆∞·ªõi mana bar
        ui_x = 20
        ui_y = 84  # D∆∞·ªõi thanh mana (58 + 18 + 8px spacing)
        ui_width = 300  # Same width as HP/Mana bars
        ui_height = 50
        
        # Font
        try:
            font = pygame.font.Font("tai_nguyen/font/Fz-Futurik.ttf", 18)
            font_small = pygame.font.Font("tai_nguyen/font/Fz-Futurik.ttf", 14)
        except:
            font = pygame.font.Font(None, 18)
            font_small = pygame.font.Font(None, 14)
        
        # Background panel (dark, semi-transparent)
        bg_surface = pygame.Surface((ui_width, ui_height), pygame.SRCALPHA)
        pygame.draw.rect(bg_surface, (30, 30, 40, 200), (0, 0, ui_width, ui_height), border_radius=8)
        screen.blit(bg_surface, (ui_x, ui_y))
        
        # Border (golden)
        pygame.draw.rect(screen, (255, 215, 0), (ui_x, ui_y, ui_width, ui_height), 2, border_radius=8)
        
        # Skill icon area (left side)
        icon_size = 40
        icon_x = ui_x + 8
        icon_y = ui_y + (ui_height - icon_size) // 2
        
        # Draw icon background
        pygame.draw.rect(screen, (50, 50, 60), (icon_x, icon_y, icon_size, icon_size), border_radius=4)
        pygame.draw.rect(screen, (255, 215, 0), (icon_x, icon_y, icon_size, icon_size), 1, border_radius=4)
        
        # Draw "F" key in icon
        key_text = font.render("F", True, (255, 215, 0))
        key_rect = key_text.get_rect(center=(icon_x + icon_size//2, icon_y + icon_size//2))
        screen.blit(key_text, key_rect)
        
        # Skill name (right of icon)
        name_x = icon_x + icon_size + 10
        name_y = ui_y + 8
        skill_text = font.render("SKILL CHI·∫æN TH·∫¶N", True, (255, 215, 0))
        screen.blit(skill_text, (name_x, name_y))
        
        # Cooldown info (below name) - HI·ªÇN TH·ªä TH·ªúI GIAN H·ªíI CHI√äU
        remaining = self.player.get_skill_cooldown_remaining()
        cost_y = name_y + 22
        
        if remaining > 0:
            # ƒêang h·ªìi chi√™u - hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i
            cd_text = font_small.render(f"H·ªìi chi√™u: {remaining:.1f}s", True, (255, 150, 150))
            screen.blit(cd_text, (name_x, cost_y))
        else:
            # S·∫µn s√†ng - hi·ªÉn th·ªã t·ªïng th·ªùi gian h·ªìi chi√™u
            ready_text = font_small.render(f"H·ªìi chi√™u: {self.player.skill_cooldown/1000:.0f}s", True, (150, 150, 150))
            screen.blit(ready_text, (name_x, cost_y))
        
        # Status indicator (right side)
        status_x = ui_x + ui_width - 100
        status_y = ui_y + (ui_height - 30) // 2
        
        if remaining > 0:
            # ƒêang cooldown - hi·ªÉn th·ªã timer l·ªõn
            cd_big = font.render(f"{remaining:.1f}s", True, (255, 100, 100))
            screen.blit(cd_big, (status_x + 10, status_y + 8))
        else:
            if self.player.mana >= self.player.skill_mana_cost:
                # Ready to use - hi·ªÉn th·ªã READY v·ªõi glow
                ready_text = font.render("READY!", True, (0, 255, 0))
                screen.blit(ready_text, (status_x, status_y + 8))
                
                # Add pulsing glow effect
                import math
                pulse = abs(math.sin(pygame.time.get_ticks() / 300.0))
                glow_alpha = int(100 + pulse * 100)
                glow_surface = pygame.Surface((80, 30), pygame.SRCALPHA)
                pygame.draw.ellipse(glow_surface, (0, 255, 0, glow_alpha), glow_surface.get_rect())
                screen.blit(glow_surface, (status_x - 10, status_y - 5))
            else:
                # Kh√¥ng ƒë·ªß mana
                need_text = font_small.render(f"C·∫ßn {self.player.skill_mana_cost} MP", True, (255, 100, 100))
                screen.blit(need_text, (status_x - 10, status_y + 8))
"""

# Template code ƒë·ªÉ th√™m v√†o ƒë·∫ßu update()
UPDATE_CODE = """        
        # N·∫øu ƒëang ph√°t skill video th√¨ pause game
        if self.showing_skill_video and self.skill_video:
            self.skill_video.update()
            return
"""

# Template code ƒë·ªÉ th√™m v√†o ƒë·∫ßu draw()
DRAW_CODE = """        # N·∫øu ƒëang ph√°t skill video, v·∫Ω video to√†n m√†n h√¨nh
        if self.showing_skill_video and self.skill_video:
            # V·∫Ω video skill
            self.skill_video.draw(screen)
            return
"""

# Template code ƒë·ªÉ th√™m v√†o cu·ªëi draw() tr∆∞·ªõc return cu·ªëi c√πng
DRAW_UI_CODE = """        
        # V·∫Ω skill cooldown UI (ch·ªâ cho Chi·∫øn Th·∫ßn L·∫°c H·ªìng)
        if "chien_than_lac_hong" in self.player.folder:
            self.draw_skill_ui(screen)
"""

print("=" * 60)
print("H∆Ø·ªöNG D·∫™N √ÅP D·ª§NG SKILL SYSTEM CHO T·∫§T C·∫¢ MAP")
print("=" * 60)
print("\n‚ö†Ô∏è  Script n√†y ch·ªâ hi·ªÉn th·ªã h∆∞·ªõng d·∫´n. B·∫°n c·∫ßn √°p d·ª•ng th·ªß c√¥ng.")
print("\nƒê·ªÉ √°p d·ª•ng skill system cho m·ªói map, l√†m theo c√°c b∆∞·ªõc sau:\n")

print("üìù B∆Ø·ªöC 1: Th√™m import v√†o ƒë·∫ßu file")
print("-" * 60)
print(IMPORT_CODE)

print("\nüìù B∆Ø·ªöC 2: Th√™m v√†o __init__ (sau ph·∫ßn kh·ªüi t·∫°o camera)")
print("-" * 60)
print(INIT_CODE)

print("\nüìù B∆Ø·ªöC 3: Th√™m v√†o handle_event (trong if event.type == pygame.KEYDOWN)")
print("-" * 60)
print(HANDLE_EVENT_CODE)

print("\nüìù B∆Ø·ªöC 4: Th√™m c√°c method m·ªõi v√†o class")
print("-" * 60)
print(METHOD_CODE)

print("\nüìù B∆Ø·ªöC 5: Th√™m v√†o ƒë·∫ßu h√†m update()")
print("-" * 60)
print(UPDATE_CODE)

print("\nüìù B∆Ø·ªöC 6: Th√™m v√†o ƒë·∫ßu h√†m draw()")
print("-" * 60)
print(DRAW_CODE)

print("\nüìù B∆Ø·ªöC 7: Th√™m v√†o cu·ªëi h√†m draw() (tr∆∞·ªõc return cu·ªëi)")
print("-" * 60)
print(DRAW_UI_CODE)

print("\n" + "=" * 60)
print("üìã DANH S√ÅCH MAP C·∫¶N C·∫¨P NH·∫¨T:")
print("=" * 60)
for i, map_file in enumerate(MAP_FILES, 1):
    exists = "‚úÖ" if os.path.exists(map_file) else "‚ùå"
    print(f"{i}. {exists} {map_file}")

print("\n" + "=" * 60)
print("‚ú® L∆∞u √Ω:")
print("=" * 60)
print("- Map man1.py ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t l√†m m·∫´u")
print("- √Åp d·ª•ng t∆∞∆°ng t·ª± cho c√°c map c√≤n l·∫°i")
print("- Skill ch·ªâ ho·∫°t ƒë·ªông khi ch∆°i Chi·∫øn Th·∫ßn L·∫°c H·ªìng")
print("- Video skill: Tai_nguyen/video/skill_chien_than.mp4")
print("- Ph√≠m F ƒë·ªÉ k√≠ch ho·∫°t skill")
print("- Chi ph√≠: 100 mana")
print("- Cooldown: 30 gi√¢y")
print("- Damage: 100 HP")
print("- Ph·∫°m vi: 400 pixel")
print("=" * 60)
